// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstname String
  surname   String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders    Order[]

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  useInMenu   Boolean   @default(false) @map("use_in_menu")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  products    ProductCategory[]

  @@map("categories")
}

model Product {
  id                Int       @id @default(autoincrement())
  enabled          Boolean   @default(false)
  name             String
  slug             String    @unique
  useInMenu        Boolean   @default(false) @map("use_in_menu")
  stock            Int       @default(0)
  description      String?   @db.Text
  price            Float
  priceWithDiscount Float    @map("price_with_discount")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  
  // Relacionamentos
  images           ProductImage[]
  options          ProductOption[]
  categories       ProductCategory[]
  orderItems       OrderItem[]

  @@map("products")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  enabled   Boolean  @default(false)
  path      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductOption {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  title     String
  shape     String   @default("square")
  radius    Int      @default(0)
  type      String   @default("text")
  values    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_options")
}

model ProductCategory {
  productId  Int      @map("product_id")
  categoryId Int      @map("category_id")

  // Relacionamentos
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int         @map("user_id")
  status      String      @default("pending")
  total       Float
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relacionamentos
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int       @map("order_id")
  productId   Int       @map("product_id")
  quantity    Int
  price       Float
  options     String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relacionamentos
  order       Order     @relation(fields: [orderId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@map("order_items")
}